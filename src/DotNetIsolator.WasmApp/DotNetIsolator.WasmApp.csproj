<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<OutputType>Exe</OutputType>
		<TargetFramework>net8.0</TargetFramework>
		<ImplicitUsings>enable</ImplicitUsings>
		<RuntimeIdentifier>wasi-wasm</RuntimeIdentifier>
		<AllowUnsafeBlocks>true</AllowUnsafeBlocks>
		<Nullable>enable</Nullable>

		<WASI_SDK_PATH>C:\Dev\WasiSdk\WasiSdk24</WASI_SDK_PATH>

		<!-- Additional optional properties to customize the build -->
		<WasmBuildNative>true</WasmBuildNative>
		<WasmGenerateAppBundle>true</WasmGenerateAppBundle>
		<WasmSingleFileBundle>false</WasmSingleFileBundle>
		<InvariantGlobalization>false</InvariantGlobalization>
		<WasmDebugLevel>-1</WasmDebugLevel>
		<WasmEnableExceptionHandling>false</WasmEnableExceptionHandling>
		<WasmEnableSIMD>false</WasmEnableSIMD>
		<WasmNativeCompileVerbose>true</WasmNativeCompileVerbose>
		<WasmStripAOTAssemblies>false</WasmStripAOTAssemblies>
		<WasmEmitSymbolMap>true</WasmEmitSymbolMap>
		<WasmNativeStrip>false</WasmNativeStrip>

		<UseWizer>false</UseWizer>
	</PropertyGroup>

	<ItemGroup>
		<PackageReference Include="MessagePack" Version="2.5.103" />
		<!--<PackageReference Include="Microsoft.NET.Runtime.WebAssembly.Wasi.Sdk" Version="8.0.8" />-->
	</ItemGroup>

	<!-- Define the native .c files to be included in the build -->
	<ItemGroup>
		<NativeSourceFiles Include="native\*.c" />
	</ItemGroup>

	<!-- Copy .c files to the intermediate output directory before the build process -->
	<Target Name="PrepareNativeFiles" BeforeTargets="WasmBuildApp">
		<Message Importance="high" Text="Preparing native files for compilation..." />
		<Copy SourceFiles="@(NativeSourceFiles)" DestinationFolder="$(IntermediateOutputPath)\native" />
	</Target>

	<Target Name="Foo1" BeforeTargets="WasmBuildApp">
		<Message Importance="high" Text="WasmSrcFiles: $(WasmSrcFiles)" />
		<Message Importance="high" Text="_WasmRuntimePackSrcDir: $(_WasmRuntimePackSrcDir)" />
		<Message Importance="high" Text="NativeBinDir: $(NativeBinDir)" />
	</Target>

	<ItemGroup>
		<_WasmRuntimePackSrcFile Include="native\assembly_search_hook.c" />
		<_WasmRuntimePackSrcFile Include="native\dotnetisolate.c" />
		<_WasmRuntimePackSrcFile Include="native\host_callback.c" />
	</ItemGroup>

	<!-- Custom target to add .c files to the clang compile step -->
	<Target Name="WasiSdkBuild" DependsOnTargets="PrepareNativeFiles" BeforeTargets="RunWasmPreinitializer">
		<Message Importance="high" Text="Performing WASI SDK build..." />
		<Message Importance="high" Text="Native bin dir: $(NativeBinDir)src" />
	</Target>

	<!-- Custom target to gather Wasi runtime assemblies before build -->
	<Target Name="GetWasiRuntimePackAssemblies" BeforeTargets="WasmBuildApp" Outputs="@(WasiRuntimePackAssemblies)">
		<ItemGroup>
			<WasiRuntimePackAssemblies Include="$(WasiRuntimePackRoot)lib\$(TargetFramework)\*.dll" />
		</ItemGroup>
	</Target>

	<!-- Filter bundled assemblies before Wasm bundling -->
	<!--<Target Name="FilterBundledAssemblies" BeforeTargets="WasmBuildApp">
		<ItemGroup>
			<_WasmBundleFilesToExclude Include="@(WasmBundleFiles)" Condition="%(WasmBundleFiles.WasmRole) == 'assembly' AND %(WasmBundleFiles.Filename) != 'System.Private.CoreLib' AND %(WasmBundleFiles.Filename) != 'DotNetIsolator.WasmApp' AND %(WasmBundleFiles.Filename) != 'MessagePack' AND %(WasmBundleFiles.Filename) != 'MessagePack.Annotations'" />
			<WasmBundleFiles Remove="@(_WasmBundleFilesToExclude)" />
		</ItemGroup>
	</Target>-->

	<!-- Ensure the wasm file is being generated -->
	<Target Name="CheckWasmFileGeneration" AfterTargets="_WasiGenerateAppBundle">
		<Message Importance="high" Text="Checking for dotnet.wasm in the expected output location..." />
		<Error Condition="!Exists('$(OutputPath)AppBundle\dotnet.wasm')" Text="dotnet.wasm file does not exist in '$(OutputPath)AppBundle\'!" />
		<Message Text="Found dotnet.wasm file in $(OutputPath)AppBundle." Importance="high" />
	</Target>

	<!-- Run the WebAssembly preinitializer after the build -->
	<Target Name="RunWasmPreinitializer" AfterTargets="CheckWasmFileGeneration" Condition="'$(UseWizer)' == 'true'">
		<PropertyGroup>
			<WasiPreinitializeSourceFile>$(OutputPath)AppBundle/dotnet.wasm</WasiPreinitializeSourceFile>
			<WasiPreinitializerArgs>$(WasiPreinitializerArgs) --allow-wasi --init-func _start --keep-init-func false</WasiPreinitializerArgs>
			<WasiPreinitializerArgs>$(WasiPreinitializerArgs) --mapdir /::"$(MicrosoftNetCoreAppRuntimePackRidNativeDir)"</WasiPreinitializerArgs>
			<WasiPreinitializerArgs>$(WasiPreinitializerArgs) --wasm-bulk-memory=true --inherit-env true -o "$(WasiPreinitializeSourceFile).pre" "$(WasiPreinitializeSourceFile)"</WasiPreinitializerArgs>
		</PropertyGroup>
		<Message Importance="high" Text="Running WebAssembly preinitializer on $(WasiPreinitializeSourceFile)" />
		<Exec Command="wizer $(WasiPreinitializerArgs)" EnvironmentVariables="DISABLE_ASSEMBLY_SEARCH_HOOK=1" />
		<Move SourceFiles="$(WasiPreinitializeSourceFile).pre" DestinationFiles="$(WasiPreinitializeSourceFile)" />
	</Target>

	<!-- Run wasm-opt for optimization after the preinitializer -->
	<Target Name="Run wasm-opt" AfterTargets="RunWasmPreinitializer" Condition="'$(Configuration)' == 'Release'">
		<Message Importance="high" Text="Running wasm-opt..." />
		<Exec Command="wasm-opt -Oz --enable-bulk-memory $(WasiPreinitializeSourceFile) -o $(WasiPreinitializeSourceFile)" />
	</Target>

	<!-- Hook into the Wasm build process to ensure everything is set up correctly -->
	<Target Name="WasmBuildApp" AfterTargets="Build">
		<Message Importance="high" Text="Building Wasm App Bundle..." />
		<!-- Other custom logic, or leave empty if just ensuring copy logic runs -->
	</Target>

	<!-- Custom target to resolve references before the build -->
	<!--<Target Name="ResolveReferences" BeforeTargets="WasmBuildApp">
		<WasmLoadAssembliesAndReferences
		  Assemblies="@(_WasmAssembliesInternal)"
		  AssemblySearchPaths="@(WasmAssemblySearchPaths)"
		  SkipMissingAssemblies="$(WasmSkipMissingAssemblies)">
			<Output TaskParameter="ReferencedAssemblies" ItemName="_TmpWasmAssemblies" />
		</WasmLoadAssembliesAndReferences>

		<ItemGroup>
			<_WasmAssembliesInternal Remove="@(_WasmAssembliesInternal)" />
			<_WasmAssembliesInternal Include="@(_TmpWasmAssemblies)" />
		</ItemGroup>
	</Target>-->

</Project>
